{
  "hash": "db2b7a8ffc96b40603170db2be843767",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Analyzing NR-seq data: the basics\"\nauthor: \"Isaac Vock\"\ndate: \"2024-12-22\"\ncategories: [news, code, analysis]\nformat: \n  live-html:\n    toc: true\nwebr:\n  packages:\n    - dplyr\n    - ggplot2\n    - gridExtra\nengine: knitr\neditor: \n  markdown: \n    wrap: 72\n---\n::: {.cell}\n\n:::\n\n\n\nIn my last post, I introduced NR-seq by walking through the development of an NR-seq simulator. That post implicitly introduced some of the complexities of interpreting NR-seq data. In this post, we will tackle these challenges head-on and build up a rigorous strategy by which to analyze NR-seq data. We will do this in a piece-meal fashion, first developing a simple but flawed strategy, until eventually working up to mixture modeling (the current gold-standard for NR-seq analyses). No statistical model is perfect though, so we will finish with a discussion and exploration of the limitations of this gold-standard.\n\n## NR-seq: a reminder\n\nIn an NR-seq experiment, there are two populations of RNA: those synthesized in the presence of label (a.k.a. labeled, or new, RNA) and those which were synthesized prior to metabolic labeling (a.k.a unlabeled, or old, RNA). The first task of any NR-seq analysis is for a given species of RNA (e.g., RNA transcribed from a particular gene), quantify the relative amounts of these two populations. This is referred to as that species' \"fraction new\" or \"new-to-total ratio (NTR)\". Downstream analyses are then aimed at interpreting these fraction news/NTRs. This post will only concern itself with fraction new estimation. I will use the term \"fraction new\" for the remainder of this post.\n\nTo estimate the fraction new, we rely on the mutational content of mapped sequencing reads. NR-seq involves chemically recoding metabolic label (e.g., s4U) so that reverse transcriptase reads it as a different nucleotide (e.g., a cytosine). Thus, reads from new RNA will have, on average, more mutations than reads from old RNA. This observation is the key to analyzing NR-seq data.\n\nTo test the strategies discussed, we will use simulated data. This allows us to know the ground truth and explore the robustness of any approach. Here is the function that we will use to simulate data, as well as some helper functions we can use to assess analysis strategies:\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n\n#' Simulate NR-seq data\n#' \n#'@param nt Number of transcripts.\n#'@param seqdepth Total number of reads.\n#'@param readlen Read length.\n#'@param tl Length of labeling.\n#'@param pnew Metabolic label incorporation and conversion rate.\n#'@param pold Background mutation rate.\n#'@param kdeg_logmean Average transcript log(kdeg).\n#'@param kdeg_logsd Standard deviation of transcript log(kdeg)'s.\n#'@param ksyn_logmean Average transcript log(ksyn).\n#'@param ksyn_logsd Standard deviation of transcript log(kdeg)'s.\n#'@param Ucont_alpha Beta distribution parameter for transcript U-contents.\n#'@param Ucont_beta Other beta distribution parameter for transcript U-contents.\nsimulate_nrseq <- function(nt = 200, \n                           seqdepth = 50000,\n                           readlen = 150,\n                           tl = 4,\n                           pnew = 0.05,\n                           pold = 0.002,\n                           kdeg_logmean = -1.9,\n                           kdeg_logsd = 0.7,\n                           ksyn_logmean = 2.3,\n                           ksyn_logsd = 0.7,\n                           Ucont_alpha = 25,\n                           Ucont_beta = 75){\n  \n  ### Simulate transcript parameters\n  kdegs <- rlnorm(nt, kdeg_logmean, kdeg_logsd)\n  ksyns <- rlnorm(nt, ksyn_logmean, ksyn_logsd)\n  Rss <- ksyns / kdegs\n  rel_abundance <- Rss / sum(Rss)\n  fns <- 1 - exp(-kdegs*tl)\n  \n  Uconts <- rbeta(nt, Ucont_alpha, Ucont_beta)\n  \n  ### Simulate read counts for each transcript\n  reads_per_t <- rmultinom(1, \n                           size = seqdepth,\n                           prob = rel_abundance)[,1]\n  \n  ### Simulate read-specific data\n  \n  newness <- rbinom(seqdepth,\n                    size = 1,\n                    prob = rep(fns, times = reads_per_t))\n  \n  nT <- rbinom(seqdepth,\n               size = readlen,\n               prob = rep(Uconts, times = reads_per_t))\n  \n  TC <- rbinom(seqdepth,\n               size = nT,\n               prob = pnew * newness + pold)\n  \n  ### Compile data\n  \n  sim_df <- tibble(\n    transcript = paste0(\"transcript\", rep(1:nt, times = reads_per_t)),\n    TC = TC,\n    nT = nT,\n    newness = newness\n  )\n  \n  par_df <- tibble(\n    transcript = paste0(\"transcript\", 1:nt),\n    kdeg = kdegs,\n    ksyn = ksyns,\n    fn = fns,\n    reads = reads_per_t\n  )\n  \n  return(\n    list(\n      cB = sim_df,\n      truth = par_df\n    )\n  )\n  \n}\n\n\n#' \n```\n:::\n\n\n## A simple approach: mutational cutoffs\n\nIf reads from new RNA have more mutations on average than those from old RNA, maybe we can just use a simple mutational cutoff to classify individual reads as from old or new RNA. The fraction of reads that come from the latter is then our estimate for the fraction new. Let's simulate some data and test out this approach\n\n\n\n::: {.cell}\n```{webr}\n### Simulate data\nsimdata <- simulate_nrseq()\n\n\n### Analyze data\nestimates <- simdata$cB %>%\n  dplyr::group_by(transcript) %>%\n  dplyr::summarise(\n    new_1plus = sum(n[TC > 0]),\n    new_2plus = sum(n[TC > 1]),\n    reads = sum(n)\n  ) %>%\n  dplyr::mutate(\n    fraction_new_1plus = new_1plus / reads,\n    fraction_new_2plus = new_2plus / reads\n  )\n\n\n### Assess analysis accuracy\np1 <- estimates %>%\n  dplyr::inner_join(estimates,\n                    by = \"transcript\") %>%\n  ggplot(aes(x = fn,\n             y = fraction_new_1plus)) %>%\n  geom_point(alpha = 0.5) + \n  theme_classic() + \n  geom_abline(slope = 1,\n              intercept = 0,\n              color = 'darkred',\n              linewidth = 1,\n              linetype = 'dotted') + \n  xlab(\"True fn\") + \n  ylab(\"1+ mutation fn est.\")\n\np2 <- estimates %>%\n  dplyr::inner_join(estimates,\n                    by = \"transcript\") %>%\n  ggplot(aes(x = fn,\n             y = fraction_new_2plus)) %>%\n  geom_point(alpha = 0.5) + \n  theme_classic() + \n  geom_abline(slope = 1,\n              intercept = 0,\n              color = 'darkred',\n              linewidth = 1,\n              linetype = 'dotted') + \n  xlab(\"True fn\") + \n  ylab(\"2+ mutation fn est.\")\n\ngrid.arrange(p1, p2,\n             nrow = 1,\n             ncol = 2)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}