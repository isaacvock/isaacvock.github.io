{
  "hash": "4ff78d8715c5f27796881de5664cd5de",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introducing NR-seq by simulating NR-seq\"\nauthor: \"Isaac Vock\"\ndate: \"2024-12-16\"\ncategories: [news, code, analysis]\nformat: live-html\nwebr:\n  packages:\n    - dplyr\n    - ggplot2\n    - gridExtra\nengine: knitr\neditor: \n  markdown: \n    wrap: 72\n---\n::: {.cell}\n\n:::\n\n\n\nNucleotide recoding RNA-seq (NR-seq; SLAM-seq, TimeLapse-seq, TUC-seq,\netc.), is a set of methods to probe the dynamics of RNA. These methods\nuse metabolic labeling. In this case, metabolic labeling means treating\ncells with a molecule that looks like a regular nucleotide (e.g.,\n4-thiouridine, or s4U), which cells incorporate into nascent RNA. NR-seq\nthen employs a chemistry to modify the metabolic label so that a reverse\ntranscriptase identifies it as a nucleotide different from what it\noriginally mimiced (e.g., recoding s4U as a cytosine analog). This\nallows label incorporation events to be bioinformatically detected as\napparent mutations in aligned sequencing reads.\n\nThis post introduces the main ideas behind the modeling of NR-seq data.\n\n## A brief introduction to NR-seq\n\n![Schematic of an NR-seq experiment. Adapted from Schofield et al. 2018.](TimeLapse.png)\n\nDeveloping a mechanistic understanding of gene expression regulation requires methods to probe the kinetics of RNA synthesis, processing, and degradation. While standard RNA-seq begins to solve this problem, it provides limited information about the kinetics of the processes which determine an RNAâ€™s abundance. Nucleotide recoding RNA-seq (NR-seq; TimeLapse-seq, SLAM-seq, TUC-seq, etc.) overcomes these limitations.  NR-seq combines metabolic labeling with novel chemistries that recode the hydrogen bonding pattern of a metabolic label so as to facilitate detection of labeled RNA via these chemically induced mutations in sequencing reads, absolving the need for biochemical enrichment of labeled RNA. By providing information about both overall RNA abundance and the dynamics of nascent and pre-existing RNA, NR-seq resolves the kinetic ambiguities of standard RNA-seq.\n\nOne way to intuit how metabolic labeling provides information about the dynamics of RNA is to consider one of the populations being tracked: the old, unlabeled RNA. Since this RNA can only degrade, its dynamics are entirely determined by its turnover kinetics. Combining this with the abundance information provided by standard RNA-seq provides information about the RNA's synthesis kinetics (transcription + processing). \n\n## Understanding NR-seq by simulating NR-seq\n\nHere, we will walk through a basic simulation of NR-seq data to give you\na sense as to how to think about and interpret NR-seq data.\n\n### The full shebang\n\nBelow is a summary of the entire simulation which we will walk through\npiece by piece in the following sections.\n\n\n::: {.cell}\n```{webr}\n### Simulation parameters\n\n# Number of transcripts to simulate\nnt <- 100\n\n# Distribution parameters\nkdeg_logmean <- -1.9\nkdeg_logsd <- 0.7\nksyn_logmean <- 2.3\nksyn_logsd <- 0.7\nUcont_alpha <- 25\nUcont_beta <- 75\n\n# Experimental parameters\nseqdepth <- 25000\nreadlen <- 150\ntl <- 4\npnew <- 0.05\npold <- 0.002\n\n\n### Simulate transcript parameters\nkdegs <- rlnorm(nt, kdeg_logmean, kdeg_logsd)\nksyns <- rlnorm(nt, ksyn_logmean, ksyn_logsd)\nRss <- ksyns / kdegs\nrel_abundance <- Rss / sum(Rss)\nfns <- 1 - exp(-kdegs*tl)\n\nUconts <- rbeta(nt, Ucont_alpha, Ucont_beta)\n\n### Simulate read counts for each transcript\nreads_per_t <- rmultinom(1, \n                         size = seqdepth,\n                         prob = rel_abundance)[,1]\n\n### Simulate read-specific data\n\nnewness <- rbinom(seqdepth,\n                  size = 1,\n                  prob = rep(fns, times = reads_per_t))\n\nnT <- rbinom(seqdepth,\n             size = readlen,\n             prob = rep(Uconts, times = reads_per_t))\n\nTC <- rbinom(seqdepth,\n             size = nT,\n             prob = pnew * newness + pold)\n\n### Compile data\n\nsim_df <- tibble(\n  transcript = paste0(\"transcript\", rep(1:nt, times = reads_per_t)),\n  TC = TC,\n  nT = nT,\n  newness = newness\n)\n\npar_df <- tibble(\n  transcript = paste0(\"transcript\", 1:nt),\n  kdeg = kdegs,\n  ksyn = ksyns,\n  fn = fns,\n  reads = reads_per_t\n)\n\n### Visualize\n# Panel 1: kdeg distribution\n# Panel 2: ksyn distribution\n# Panel 3: fn distribution\n# Panel 4: read count distribution\n# Panel 5: new read mutation distribution\n# Panel 6: old read mutation distribution\np1 <- ggplot(par_df,\n             aes(x = kdeg)) +\n  geom_histogram() +\n  theme_classic() + \n  xlab(\"kdeg's\") + \n  ylab(\"transcript count\")\n\np2 <- ggplot(par_df,\n             aes(x = ksyn)) +\n  geom_histogram() +\n  theme_classic() + \n  xlab(\"ksyn's\") + \n  ylab(\"transcript count\")\n\np3 <- ggplot(par_df,\n             aes(x = fns)) +\n  geom_histogram() +\n  theme_classic() + \n  xlab(\"Fraction new\") + \n  ylab(\"transcript count\")\n\np4 <- ggplot(par_df,\n             aes(x = log10(reads + 1))) +\n  geom_histogram() +\n  theme_classic() + \n  xlab(\"log10(reads + 1)\") + \n  ylab(\"transcript count\")\n\np5 <- ggplot(sim_df %>% \n               dplyr::filter(nT > 0 & newness == 0),\n             aes(x = TC / nT)) +\n  geom_histogram(fill = 'darkgray') +\n  theme_classic() + \n  xlab(\"Mutation rate for old reads\") + \n  ylab(\"transcript count\")\n\np6 <- ggplot(sim_df %>% \n               dplyr::filter(nT > 0 & newness == 1),\n             aes(x = TC / nT)) +\n  geom_histogram(fill = 'darkred') +\n  theme_classic() + \n  xlab(\"Mutation rate for new reads\") + \n  ylab(\"transcript count\")\n\n\ngrid.arrange(p1, p2, p3, p4, p5, p6,\n             nrow = 3,\n             ncol = 2)\n```\n:::\n\n\n### Mutable nucleotide content\n\nDifferent RNAs have different nucleotide content. Sequencing reads in\nstandard short read sequencing experiments typically only sample a small\nportion of the entire RNA, and thus reads from a given species of RNA\nwill also vary in their nucleotide content. In a standard NR-seq\nexperiments, uridines in an RNA synthesized in the presence of metabolic\nlabel have an opportunity to be replaced with s4U. This, we need to\nsimulate the number of Us in each read (prior to nucleotide recoding).\nSince we typically sequence cDNA, and this is also best thought as the\nnumber of Ts in the genomic sequence to which a given read aligned, we\nwill refer to this as the number of T's.\n\nLet's consider simulating sequencing reads from a specific RNA species\n(e.g., a particular transcript isoform) first. In this case, the RNA\nwill have a particular U-content, i.e., the fraction of nucleotides in\nits exonic sequence that are U's. This is a simulation parameter, along\nwith the number of reads we want to simulate, and the length of each\nread. It's simplest to assume that each nucleotide in a read has some\nset probability of being a U, and that this probability is the same for\nall nucleotides. In this case, we can draw the number of U's (or cDNA\nT's) from a [binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution):\n\n\n::: {.cell}\n```{webr}\n# Quarto live can be weird sometimes\n# Best to explicitly set background as white\npar(bg = \"white\")\n\n### Simulation parameters\nreads <- 100\nUcont <- 0.25\nreadlen <- 150\n\n### Simulation\nnT <- rbinom(reads, size = readlen, prob = Ucont)\n\n\n### Visualize\nhist(nT)\n```\n:::\n\n\n### Mutational content\n\nThe number of mutations in an NR-seq sequencing read provides the\ninformation necessary to classify it as having come from either labeled\nor unlabeled RNA. If a read is from labeled RNA (or RNA that was\nsynthesized during the label time; a given RNA molecule may not\nincorporate any metabolic label even if it could have), the mutational\ncontent of that read is a function of the following things:\n\n1.  How many mutable nucleotides are contained in the read, which we\n    simulated above.\n2.  How often the metabolic label is incorporated in place of the\n    standard nucleotide. We will also lump into this term the chemical\n    efficiency of recoding, which is usually pretty high (\\> 80%).\n3.  The background mutation rate, due to sequencing/RT/PCR errors,\n    alignment errors, SNPs, etc.\n\nWe've already simulated the first factor. The other two are parameters\nthat we will include in our simulation. Incorporation rates in\nsuccessful NR-seq experiments are typically around 5%, and background\nmutation rates can range from nearly 0% to around 0.4%, depending on a\nnumber of factors. 0.2% is a fairly typical background mutation rate in\nmy experience.\n\nFinally though, we need to determine the \"newness\" status of each\nsequencing read. Each species of RNA will have a characteristic\n\"fraction new\", which is the fraction of RNA molecules present at RNA\nextraction time that were exposed to metabolic label. We can then model\nsequencing reads as being randomly drawn from this pool, with fraction\nnew probability of sampling a labeled RNA. These processess are well modeled with binomial distributions, so simulating all of this looks\nlike:\n\n\n::: {.cell}\n```{webr}\n# Quarto live can be weird sometimes\n# Best to explicitly set background as white\npar(bg = \"white\")\n\n### Simulation parameters\nreads <- 100\nUcont <- 0.25\nreadlen <- 150\nfn <- 0.5 # fraction new\npnew <- 0.05 # incorporation/recoding rate\npold <- 0.002 # background mutation rate\n\n\n### nT Simulation\nnT <- rbinom(reads, size = readlen, prob = Ucont)\n\n\n### Mutational content simulation\nnewness <- rbinom(reads, size = 1, prob = fn)\nTC <- rbinom(reads, size = nT, prob = pnew*newness + pold)\n\n### Visualize\nhist(TC / nT,\n     main = 'All reads',\n     col = 'coral')\nhist(TC[newness == 1] /  nT[newness == 1],\n     main = 'Reads from labeled RNA',\n     xlab = 'Mutation rate',\n     col = 'darkred')\nhist(TC[newness == 0] /  nT[newness == 0],\n     main = 'Reads from unlabeled RNA',\n     xlab = 'Mutation rate',\n     col = 'darkgray')\n```\n:::\n\n\nSome observations from the above visualizations:\n\n1.  Some reads from unlabeled RNA have mutations. This is due to the\n    non-zero background mutation rate.\n2.  Some reads from labeled RNA have no mutations. This is due to the\n    incorporation rate being much less than 100%. Experimentally, this\n    is due to the metabolic label having to compete with the regular\n    nucleotide for incorporation into nascent RNA.\n\nThese observations are what make analyzing NR-seq data challenging, and\nwhat will motivate analysis strategies discussed in other posts.\n\n### RNA kinetics and NR-seq\n\nDifferent transcript isoforms can have very different properties. Of\nimportance to an NR-seq experiment, different isoforms can differ in\ntheir nucleotide content and turnover kinetics. The latter's impact is\nobvious, but my reason for bringing up the former may not be. In short,\nthe rate at which a given isoform is degraded will determine its\nfraction new.\n\nTo see why turnover kinetics of RNA influences NR-seq data, consider the\nfollowing model:\n\nIn it, RNA's are synthesized at some rate ksyn, and degraded with a rate\nconstant kdeg. kdeg is related to the average lifetime of a given RNA.\nWhen the rate at which a given species of RNA is degraded (kdeg \\* the\namount of RNA that exists to be degraded) is equal to the rate at which\nit is synthesized (ksyn), that RNA is said to be at steady-state. A bit\nof algebra reveals that this occurs when the levels of RNA are equal to\nratio of the synthesis and degradation rate constants:\n\n$$\n\\begin{aligned}\n\\text{ksyn} & = \\text{kdeg}*[\\text{RNA}]_{\\text{ss}} \\\\\n\\frac{\\text{ksyn}}{\\text{kdeg}} & = [\\text{RNA}]_{\\text{ss}}\n\\end{aligned}\n$$\n\nWhen you add metabolic label, you effectively create two species of RNA\nwith distinct dynamics:\n\n1.  Old RNA that existed at the time of labeling. These can only degrade\n    and are no longer synthesized. In this model, this means that they\n    exponentially degrade with rate constant kdeg.\n2.  New RNA that is synthesized during labeling. These will slowly\n    accumulate to steady-state levels as they are both synthesized and\n    degraded.\n\nAssuming that the synthesis and degradation rate constants are constant\nthroughout the label time, the dynamics of old and new RNA looks like:\n\n\n::: {.cell}\n```{webr}\n# Quarto live can be weird sometimes\n# Best to explicitly set background as white\npar(bg = \"white\")\n\n### Simulation parameters\nksyn <- 10 # molecules per hour\nkdeg <- 0.2 # 1 /  hour\ntend <- 24 # hours\ntimestep <- 0.01 # hours\n\n### Simuate dynamics\ntime <- seq(from = 0, to = tend, by = timestep)\nRss <- ksyn / kdeg\nOld_R <- Rss * exp(-kdeg*time)\nNew_R <- Rss * (1 - exp(-kdeg*time))\n\n### Plot\ntibble(RNA = c(Old_R, New_R),\n       population = factor(rep(c(\"Old\", \"New\"), each = length(Old_R)), levels = c(\"Old\", \"New\")),\n       time = rep(time, times = 2)) %>%\n  ggplot(aes(x = time, y = RNA, color = population)) + \n  geom_line() + \n  theme_classic() + \n  scale_color_manual(values = c('darkgray', 'darkred')) +\n  xlab(\"Time since label introduction\") + \n  ylab(\"[RNA]\") +\n  geom_hline(yintercept = Rss, \n             color = 'coral', \n             linetype = 'dotted',\n             linewidth = 1)\n\n```\n:::\n\n\nBecause the rate constants are unchanging, so is the total amount of RNA\nat any given time. Thus, the amount of Old RNA + New RNA = steady-state\nRNA level. Because of this, there is a simple relationship between the\nturnover kinetics of an RNA and the fraction new (abbreviated fn) for\nthat RNA:\n\n$$\n\\begin{aligned}\n\\text{fn} &= \\frac{[\\text{New RNA}]}{[\\text{RNA}]} \\\\\n\\text{fn} &= \\frac{[\\text{RNA}]_{\\text{ss}}\\ast(1 - e^{-\\text{kdeg}\\ast \\text{tl}})}{[\\text{RNA}]_{\\text{ss}}} \\\\\n\\text{fn} &= 1 - e^{-\\text{kdeg}\\ast \\text{tl}}\n\\end{aligned}\n$$ where tl is the amount of time for which the cells were labeled. This\nsimple relationship reveals some of the power of NR-seq. NR-seq provides\ninformation about RNA kinetics inaccessible to analyses of standard\nRNA-seq data (i.e., read counts). We can also use this relationship to\nmodify our simulation and set the more biologically interpretable\ndegradation rate constant rather than the fraction new:\n\n\n::: {.cell}\n```{webr}\n# Quarto live can be weird sometimes\n# Best to explicitly set background as white\npar(bg = \"white\")\n\n### Simulation parameters\nreads <- 100\nUcont <- 0.25\nreadlen <- 150\nkdeg <- 0.2\ntl <- 4\npnew <- 0.05\npold <- 0.002\n\n\n### nT Simulation\nnT <- rbinom(reads, size = readlen, prob = Ucont)\n\n\n### Mutational content simulation\nfn <- 1 - exp(-kdeg*tl)\nnewness <- rbinom(reads, size = 1, prob = fn)\nTC <- rbinom(reads, size = nT, prob = pnew*newness + pold)\n\n### Visualize\nhist(TC / nT,\n     main = 'All reads',\n     col = 'coral')\nhist(TC[newness == 1] /  nT[newness == 1],\n     main = 'Reads from labeled RNA',\n     xlab = 'Mutation rate',\n     col = 'darkred')\nhist(TC[newness == 0] /  nT[newness == 0],\n     main = 'Reads from unlabeled RNA',\n     xlab = 'Mutation rate',\n     col = 'darkgray')\n```\n:::\n\n\n### Simulating multiple transcripts\n\nSo far, we have focused on simulating data for a single transcript. In\nactuality, NR-seq is a high throughput method that provides information\nabout all of the appreciably expressed transcripts in the cells from\nwhich you extracted RNA. Thus, we can set the number of transcripts we\nwould like to simulate, and then draw kinetic parameters from a chosen\ndistribution.\n\nOne thing we need to consider though is how the rate constants give rise\nto expected read counts for each transcript. We have discussed how the\nsteady-state levels of a given RNA are a function of its synthesis and\ndegradation rate constants, but is an RNA's abundance related to its\nRNA-seq coverage?\n\nThe answer comes from realizing that RNA-seq is a measure of **relative\nRNA abundance**, not absolute abundance. That is, the number of reads\nyou get from an RNA is a function of how abundant that RNA is, relative\nto all other RNAs in the sequenced pool. In addition, abundance in this\nsetting is a function not only of the molecular abundance of an RNA\n(i.e., the number of molecules of that RNA present in the average cell),\nbut also of the length of the RNA. This is because we are sequencing\nshort fragments of an RNA, and thus the probability that we sequence a\nfragment from a given RNA depends on how many fragments in our pool come\nfrom that RNA. This is roughly\n$[\\text{RNA}]_{\\text{ss}} \\ast \\text{Length}$. In this simulation, we\nwill make the simplifying assumption that all transcripts are the same\nlength, and will thus only need to consider the relative steady-state\nabundances of each RNA. Thus, the parameters that we need to set are:\n\n1.  Those determining the rate constant distributions from which we\n    sample transcript-specific ksyn's and kdeg's.\n2.  The total number of reads in our library. These will be randomly\n    divided among the various simulated transcripts.\n3.  Those determining the U-content distribution from which we sapmle\n    transcript-specific U-content's.\n\nDeciding 1) and 3) is often best done through comparing candidate\ndistributions to real data, and choosing parameters that make the\nsimulated data look as close to the real data as possible. The result of\nthis may look like:\n\n\n::: {.cell}\n```{webr}\n\n### Simulation parameters\n\n# Number of transcripts to simulate\nnt <- 100\n\n# Distribution parameters\nkdeg_logmean <- -1.9\nkdeg_logsd <- 0.7\nksyn_logmean <- 2.3\nksyn_logsd <- 0.7\nUcont_alpha <- 25\nUcont_beta <- 75\n\n# Experimental parameters\nseqdepth <- 25000\nreadlen <- 150\ntl <- 4\npnew <- 0.05\npold <- 0.002\n\n\n### Simulate transcript parameters\nkdegs <- rlnorm(nt, kdeg_logmean, kdeg_logsd)\nksyns <- rlnorm(nt, ksyn_logmean, ksyn_logsd)\nRss <- ksyns / kdegs\nrel_abundance <- Rss / sum(Rss)\nfns <- 1 - exp(-kdegs*tl)\n\nUconts <- rbeta(nt, Ucont_alpha, Ucont_beta)\n\n### Simulate read counts for each transcript\nreads_per_t <- rmultinom(1, \n                         size = seqdepth,\n                         prob = rel_abundance)[,1]\n\n### Simulate read-specific data\n\nnewness <- rbinom(seqdepth,\n                  size = 1,\n                  prob = rep(fns, times = reads_per_t))\n\nnT <- rbinom(seqdepth,\n             size = readlen,\n             prob = rep(Uconts, times = reads_per_t))\n\nTC <- rbinom(seqdepth,\n             size = nT,\n             prob = pnew * newness + pold)\n\n### Compile data\n\nsim_df <- tibble(\n  transcript = paste0(\"transcript\", rep(1:nt, times = reads_per_t)),\n  TC = TC,\n  nT = nT,\n  newness = newness\n)\n\npar_df <- tibble(\n  transcript = paste0(\"transcript\", 1:nt),\n  kdeg = kdegs,\n  ksyn = ksyns,\n  fn = fns,\n  reads = reads_per_t\n)\n\n### Visualize\n# Panel 1: kdeg distribution\n# Panel 2: ksyn distribution\n# Panel 3: fn distribution\n# Panel 4: read count distribution\n# Panel 5: new read mutation distribution\n# Panel 6: old read mutation distribution\np1 <- ggplot(par_df,\n             aes(x = kdeg)) +\n  geom_histogram() +\n  theme_classic() + \n  xlab(\"kdeg's\") + \n  ylab(\"transcript count\")\n\np2 <- ggplot(par_df,\n             aes(x = ksyn)) +\n  geom_histogram() +\n  theme_classic() + \n  xlab(\"ksyn's\") + \n  ylab(\"transcript count\")\n\np3 <- ggplot(par_df,\n             aes(x = fns)) +\n  geom_histogram() +\n  theme_classic() + \n  xlab(\"Fraction new\") + \n  ylab(\"transcript count\")\n\np4 <- ggplot(par_df,\n             aes(x = log10(reads + 1))) +\n  geom_histogram() +\n  theme_classic() + \n  xlab(\"log10(reads + 1)\") + \n  ylab(\"transcript count\")\n\np5 <- ggplot(sim_df %>% \n               dplyr::filter(nT > 0 & newness == 0),\n             aes(x = TC / nT)) +\n  geom_histogram(fill = 'darkgray') +\n  theme_classic() + \n  xlab(\"Mutation rate for old reads\") + \n  ylab(\"transcript count\")\n\np6 <- ggplot(sim_df %>% \n               dplyr::filter(nT > 0 & newness == 1),\n             aes(x = TC / nT)) +\n  geom_histogram(fill = 'darkred') +\n  theme_classic() + \n  xlab(\"Mutation rate for new reads\") + \n  ylab(\"transcript count\")\n\n\ngrid.arrange(p1, p2, p3, p4, p5, p6,\n             nrow = 3,\n             ncol = 2)\n\n```\n:::\n\n\n## Summary\n\nIn this post, we introduced NR-seq, and built a simulation of NR-seq\ndata to explore several aspects of NR-seq data. In the next post, we\nwill discuss various strategies for analyzing this data, using the\nsimulation we built here to test our strategies.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}